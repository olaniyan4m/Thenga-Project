// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String   @id @default(cuid())
  merchantId  String
  sku         String   @unique
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  cost        Decimal? @db.Decimal(10, 2)
  stock       Int      @default(0)
  minStock    Int      @default(0)
  maxStock    Int?
  imageUrl    String[]
  category    String?
  tags        String[]
  status      ProductStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  merchant    Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]
  stockMovements StockMovement[]
  inventoryAlerts InventoryAlert[]

  @@map("products")
}

model StockMovement {
  id          String   @id @default(cuid())
  productId   String
  type        StockMovementType
  quantity    Int
  reason      String?
  reference   String? // Order ID, Purchase ID, etc.
  notes       String?
  createdAt   DateTime @default(now())
  createdBy   String?

  // Relations
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("stock_movements")
}

model InventoryAlert {
  id          String   @id @default(cuid())
  productId   String
  type        AlertType
  message     String
  isResolved  Boolean  @default(false)
  resolvedAt  DateTime?
  createdAt   DateTime @default(now())

  // Relations
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("inventory_alerts")
}

model Category {
  id          String   @id @default(cuid())
  merchantId  String
  name        String
  description String?
  parentId    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  merchant    Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]

  @@map("categories")
}

model Supplier {
  id          String   @id @default(cuid())
  merchantId  String
  name        String
  contactName String?
  email       String?
  phone       String?
  address     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  merchant    Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  purchases   Purchase[]

  @@map("suppliers")
}

model Purchase {
  id          String   @id @default(cuid())
  merchantId  String
  supplierId  String
  purchaseNumber String @unique
  totalAmount Decimal @db.Decimal(10, 2)
  status      PurchaseStatus @default(PENDING)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  merchant    Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  supplier    Supplier @relation(fields: [supplierId], references: [id])
  items       PurchaseItem[]

  @@map("purchases")
}

model PurchaseItem {
  id          String   @id @default(cuid())
  purchaseId  String
  productId   String
  quantity    Int
  unitCost    Decimal @db.Decimal(10, 2)
  totalCost   Decimal @db.Decimal(10, 2)

  // Relations
  purchase    Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  product     Product @relation(fields: [productId], references: [id])

  @@map("purchase_items")
}

model Merchant {
  id          String   @id @default(cuid())
  userId      String
  businessName String
  address     String
  phone       String?
  email       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products    Product[]
  categories  Category[]
  suppliers   Supplier[]
  purchases   Purchase[]

  @@map("merchants")
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  productId   String
  quantity    Int
  unitPrice   Decimal @db.Decimal(10, 2)
  totalPrice  Decimal @db.Decimal(10, 2)

  // Relations
  product     Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Enums
enum ProductStatus {
  ACTIVE
  INACTIVE
  DISCONTINUED
  OUT_OF_STOCK
}

enum StockMovementType {
  IN
  OUT
  ADJUSTMENT
  TRANSFER
  RETURN
}

enum AlertType {
  LOW_STOCK
  OUT_OF_STOCK
  OVERSTOCK
  EXPIRING
  EXPIRED
}

enum PurchaseStatus {
  PENDING
  ORDERED
  RECEIVED
  CANCELLED
}
